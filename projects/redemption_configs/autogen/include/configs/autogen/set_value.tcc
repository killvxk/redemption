//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

void Inifile::ConfigurationHolder::set_value(const char * context, const char * key, const char * value) {
    array_view_const_char av {value, strlen(value)};
    if (0) {}
    else if (0 == strcmp(context, "globals")) {
        if (0) {}
        else if (0 == strcmp(key, "bitmap_cache")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "glyph_cache")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::glyph_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "port")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::port&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "nomouse")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::nomouse&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "notimestamp")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::notimestamp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "encryptionLevel")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::encryptionLevel&>(this->variables).value,
                ::configs::spec_type<Level>{},
                av
            );
        }
        else if (0 == strcmp(key, "authfile")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::authfile&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "handshake_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::handshake_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::session_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "inactivity_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::inactivity_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "keepalive_grace_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::keepalive_grace_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "authentication_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::authentication_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "close_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::close_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "trace_type")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::trace_type&>(this->variables).value,
                ::configs::spec_type<TraceType>{},
                av
            );
        }
        else if (0 == strcmp(key, "listen_address")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::listen_address&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::ip>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_transparent_mode")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_transparent_mode&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "certificate_password")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::certificate_password&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                av
            );
        }
        else if (0 == strcmp(key, "png_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::png_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "wrm_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::wrm_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "movie_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::movie_path&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_bitmap_update")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_bitmap_update&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_close_box")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_close_box&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_osd")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_osd&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_osd_display_remote_target")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_osd_display_remote_target&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "persistent_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::persistent_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_wab_integration")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::enable_wab_integration&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "allow_using_multiple_monitors")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::allow_using_multiple_monitors&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_refresh_rect")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::bogus_refresh_rect&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "codec_id")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::codec_id&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "video_quality")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::video_quality&>(this->variables).value,
                ::configs::spec_type<Level>{},
                av
            );
        }
        else if (0 == strcmp(key, "large_pointer_support")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::large_pointer_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "unicode_keyboard_event_support")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::unicode_keyboard_event_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "mod_recv_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::mod_recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "spark_view_specific_glyph_width")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::spark_view_specific_glyph_width&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "experimental_enable_serializer_data_block_size_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::experimental_enable_serializer_data_block_size_limit&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "experimental_support_resize_session_during_recording")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::experimental_support_resize_session_during_recording&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "rdp_keepalive_connection_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::globals::rdp_keepalive_connection_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "session_log")) {
        if (0) {}
        else if (0 == strcmp(key, "enable_session_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::session_log::enable_session_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_arcsight_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::session_log::enable_arcsight_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "log_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::session_log::log_path&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "keyboard_input_masking_level")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::session_log::keyboard_input_masking_level&>(this->variables).value,
                ::configs::spec_type<KeyboardInputMaskingLevel>{},
                av
            );
        }
        else if (0 == strcmp(key, "hide_non_printable_kbd_input")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::session_log::hide_non_printable_kbd_input&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "client")) {
        if (0) {}
        else if (0 == strcmp(key, "keyboard_layout_proposals")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::keyboard_layout_proposals&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                av
            );
        }
        else if (0 == strcmp(key, "ignore_logon_password")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::ignore_logon_password&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "performance_flags_default")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::performance_flags_default&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "performance_flags_force_present")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::performance_flags_force_present&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "performance_flags_force_not_present")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::performance_flags_force_not_present&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "auto_adjust_performance_flags")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::auto_adjust_performance_flags&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "tls_fallback_legacy")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::tls_fallback_legacy&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "tls_support")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::tls_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_neg_request")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::bogus_neg_request&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_user_id")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::bogus_user_id&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "disable_tsk_switch_shortcuts")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::disable_tsk_switch_shortcuts&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "rdp_compression")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                av
            );
        }
        else if (0 == strcmp(key, "max_color_depth")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::max_color_depth&>(this->variables).value,
                ::configs::spec_type<ColorDepth>{},
                av
            );
        }
        else if (0 == strcmp(key, "persistent_disk_bitmap_cache")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "cache_waiting_list")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "persist_bitmap_cache_on_disk")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bitmap_compression")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::bitmap_compression&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "fast_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_suppress_output")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::enable_suppress_output&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "ssl_cipher_list")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::ssl_cipher_list&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "show_target_user_in_f12_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::show_target_user_in_f12_message&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_new_pointer_update")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::enable_new_pointer_update&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_ios_glyph_support_level")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::bogus_ios_glyph_support_level&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "transform_glyph_to_bitmap")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::transform_glyph_to_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_number_of_fastpath_input_event")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::bogus_number_of_fastpath_input_event&>(this->variables).value,
                ::configs::spec_type<BogusNumberOfFastpathInputEvent>{},
                av
            );
        }
        else if (0 == strcmp(key, "recv_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_osd_4_eyes")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::client::enable_osd_4_eyes&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "mod_rdp")) {
        if (0) {}
        else if (0 == strcmp(key, "rdp_compression")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                av
            );
        }
        else if (0 == strcmp(key, "disconnect_on_logon_user_change")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::disconnect_on_logon_user_change&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "open_session_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::open_session_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "extra_orders")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::extra_orders&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<unsigned int>>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_nla")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::enable_nla&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_kerberos")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::enable_kerberos&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "persistent_disk_bitmap_cache")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "cache_waiting_list")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "persist_bitmap_cache_on_disk")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "allow_channels")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::allow_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                av
            );
        }
        else if (0 == strcmp(key, "deny_channels")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::deny_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                av
            );
        }
        else if (0 == strcmp(key, "fast_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_redirection_support")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_redirection_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_sc_net_size")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::bogus_sc_net_size&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "proxy_managed_drives")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::proxy_managed_drives&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                av
            );
        }
        else if (0 == strcmp(key, "ignore_auth_channel")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::ignore_auth_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "auth_channel")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::auth_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                av
            );
        }
        else if (0 == strcmp(key, "checkout_channel")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::checkout_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                av
            );
        }
        else if (0 == strcmp(key, "alternate_shell")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::alternate_shell&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "shell_arguments")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::shell_arguments&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "shell_working_directory")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::shell_working_directory&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "use_client_provided_alternate_shell")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::use_client_provided_alternate_shell&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "use_client_provided_remoteapp")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::use_client_provided_remoteapp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "use_native_remoteapp_capability")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::use_native_remoteapp_capability&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_session_probe")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::enable_session_probe&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_use_smart_launcher")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_use_clipboard_based_launcher&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_enable_launch_mask")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_enable_launch_mask&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_on_launch_failure")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_on_launch_failure&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnLaunchFailure>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_launch_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_launch_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_launch_fallback_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_launch_fallback_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_start_launch_timeout_timer_only_after_logon")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_keepalive_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_on_keepalive_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_on_keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnKeepaliveTimeout>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_end_disconnected_session")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_end_disconnected_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_customize_executable_name")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_customize_executable_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_enable_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_enable_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_enable_log_rotation")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_enable_log_rotation&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_disconnected_application_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_disconnected_application_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_disconnected_session_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_disconnected_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_idle_session_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_idle_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_exe_or_file")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_exe_or_file&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_arguments")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_arguments&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_clipboard_based_launcher_clipboard_initialization_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_clipboard_based_launcher_start_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_start_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_clipboard_based_launcher_long_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_long_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_clipboard_based_launcher_short_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_clipboard_based_launcher_short_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_allow_multiple_handshake")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_allow_multiple_handshake&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_enable_crash_dump")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_enable_crash_dump&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_handle_usage_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_handle_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 1000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_memory_usage_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_memory_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 200000000>>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_ignore_ui_less_processes_during_end_of_session_check")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_ignore_ui_less_processes_during_end_of_session_check&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_childless_window_as_unidentified_input_field")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_childless_window_as_unidentified_input_field&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "session_probe_public_session")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::session_probe_public_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_store")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_store&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_check")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_check&>(this->variables).value,
                ::configs::spec_type<ServerCertCheck>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_access_allowed_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_access_allowed_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_create_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_create_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_success_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_success_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_failure_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_failure_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_cert_error_message")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::server_cert_error_message&>(this->variables).value,
                ::configs::spec_type<ServerNotification>{},
                av
            );
        }
        else if (0 == strcmp(key, "hide_client_name")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::hide_client_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "clean_up_32_bpp_cursor")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::clean_up_32_bpp_cursor&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_ios_rdpdr_virtual_channel")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::bogus_ios_rdpdr_virtual_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_rdpdr_data_analysis")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::enable_rdpdr_data_analysis&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "remoteapp_bypass_legal_notice_delay")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "remoteapp_bypass_legal_notice_timeout")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "log_only_relevant_clipboard_activities")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::log_only_relevant_clipboard_activities&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "experimental_fix_input_event_sync")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::experimental_fix_input_event_sync&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "experimental_fix_too_long_cookie")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_rdp::experimental_fix_too_long_cookie&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "metrics")) {
        if (0) {}
        else if (0 == strcmp(key, "enable_rdp_metrics")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::enable_rdp_metrics&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "enable_vnc_metrics")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::enable_vnc_metrics&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "log_dir_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::log_dir_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "log_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::log_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "log_file_turnover_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::log_file_turnover_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::hours>{},
                av
            );
        }
        else if (0 == strcmp(key, "sign_key")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::metrics::sign_key&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "mod_vnc")) {
        if (0) {}
        else if (0 == strcmp(key, "clipboard_up")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::clipboard_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "clipboard_down")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::clipboard_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "encodings")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::encodings&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<int>>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_clipboard_encoding_type")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::server_clipboard_encoding_type&>(this->variables).value,
                ::configs::spec_type<ClipboardEncodingType>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_clipboard_infinite_loop")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::bogus_clipboard_infinite_loop&>(this->variables).value,
                ::configs::spec_type<VncBogusClipboardInfiniteLoop>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_is_apple")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::server_is_apple&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "server_unix_alt")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_vnc::server_unix_alt&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "mod_replay")) {
        if (0) {}
        else if (0 == strcmp(key, "on_end_of_data")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_replay::on_end_of_data&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "replay_on_loop")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::mod_replay::replay_on_loop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "ocr")) {
        if (0) {}
        else if (0 == strcmp(key, "version")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::ocr::version&>(this->variables).value,
                ::configs::spec_type<OcrVersion>{},
                av
            );
        }
        else if (0 == strcmp(key, "locale")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::ocr::locale&>(this->variables).value,
                ::configs::spec_type<OcrLocale>{},
                av
            );
        }
        else if (0 == strcmp(key, "interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::ocr::interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 100>>>{},
                av
            );
        }
        else if (0 == strcmp(key, "on_title_bar_only")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::ocr::on_title_bar_only&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "max_unrecog_char_rate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::ocr::max_unrecog_char_rate&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<unsigned int, 0, 100>>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "video")) {
        if (0) {}
        else if (0 == strcmp(key, "capture_groupid")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::capture_groupid&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "capture_flags")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::capture_flags&>(this->variables).value,
                ::configs::spec_type<CaptureFlags>{},
                av
            );
        }
        else if (0 == strcmp(key, "png_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::png_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 10>>>{},
                av
            );
        }
        else if (0 == strcmp(key, "frame_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::frame_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 100>>>{},
                av
            );
        }
        else if (0 == strcmp(key, "break_interval")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::break_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                av
            );
        }
        else if (0 == strcmp(key, "png_limit")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::png_limit&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "replay_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::replay_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "hash_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::hash_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "record_tmp_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::record_tmp_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "record_path")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::record_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                av
            );
        }
        else if (0 == strcmp(key, "disable_keyboard_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::disable_keyboard_log&>(this->variables).value,
                ::configs::spec_type<KeyboardLogFlags>{},
                av
            );
        }
        else if (0 == strcmp(key, "disable_clipboard_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::disable_clipboard_log&>(this->variables).value,
                ::configs::spec_type<ClipboardLogFlags>{},
                av
            );
        }
        else if (0 == strcmp(key, "disable_file_system_log")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::disable_file_system_log&>(this->variables).value,
                ::configs::spec_type<FileSystemLogFlags>{},
                av
            );
        }
        else if (0 == strcmp(key, "rt_display")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::rt_display&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "wrm_color_depth_selection_strategy")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::wrm_color_depth_selection_strategy&>(this->variables).value,
                ::configs::spec_type<ColorDepthSelectionStrategy>{},
                av
            );
        }
        else if (0 == strcmp(key, "wrm_compression_algorithm")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::wrm_compression_algorithm&>(this->variables).value,
                ::configs::spec_type<WrmCompressionAlgorithm>{},
                av
            );
        }
        else if (0 == strcmp(key, "bogus_vlc_frame_rate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::bogus_vlc_frame_rate&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }
        else if (0 == strcmp(key, "l_bitrate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::l_bitrate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "l_framerate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::l_framerate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "l_height")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::l_height&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "l_width")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::l_width&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "l_qscale")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::l_qscale&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "m_bitrate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::m_bitrate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "m_framerate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::m_framerate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "m_height")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::m_height&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "m_width")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::m_width&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "m_qscale")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::m_qscale&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "h_bitrate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::h_bitrate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "h_framerate")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::h_framerate&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "h_height")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::h_height&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "h_width")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::h_width&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "h_qscale")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::h_qscale&>(this->variables).value,
                ::configs::spec_type<unsigned int>{},
                av
            );
        }
        else if (0 == strcmp(key, "smart_video_cropping")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::smart_video_cropping&>(this->variables).value,
                ::configs::spec_type<SmartVideoCropping>{},
                av
            );
        }
        else if (0 == strcmp(key, "play_video_with_corrupted_bitmap")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::video::play_video_with_corrupted_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "crypto")) {
        if (0) {}
        else if (0 == strcmp(key, "encryption_key")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::crypto::key0&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_binary>{},
                av
            );
        }
        else if (0 == strcmp(key, "sign_key")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::crypto::key1&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_binary>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "debug")) {
        if (0) {}
        else if (0 == strcmp(key, "fake_target_ip")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::fake_target_ip&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "x224")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::x224&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "mcs")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::mcs&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "sec")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::sec&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "rdp")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::rdp&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "primary_orders")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::primary_orders&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "secondary_orders")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::secondary_orders&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "bitmap_update")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::bitmap_update&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "bitmap")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::bitmap&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "capture")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::capture&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "auth")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::auth&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "session")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::session&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "front")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::front&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "mod_rdp")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::mod_rdp&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "mod_vnc")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::mod_vnc&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "mod_internal")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::mod_internal&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "mod_xup")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::mod_xup&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "widget")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::widget&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "input")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::input&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "password")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::password&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "compression")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::compression&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "cache")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::cache&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "performance")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::performance&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "pass_dialog_box")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::pass_dialog_box&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "ocr")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::ocr&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "ffmpeg")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::ffmpeg&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                av
            );
        }
        else if (0 == strcmp(key, "config")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::debug::config&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "remote_program")) {
        if (0) {}
        else if (0 == strcmp(key, "allow_resize_hosted_desktop")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::remote_program::allow_resize_hosted_desktop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "translation")) {
        if (0) {}
        else if (0 == strcmp(key, "language")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::translation::language&>(this->variables).value,
                ::configs::spec_type<Language>{},
                av
            );
        }
        else if (0 == strcmp(key, "password_en")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::translation::password_en&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }
        else if (0 == strcmp(key, "password_fr")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::translation::password_fr&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (0 == strcmp(context, "internal_mod")) {
        if (0) {}
        else if (0 == strcmp(key, "load_theme")) {
            ::configs::parse_and_log(
                context, key,
                static_cast<cfg::internal_mod::theme&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                av
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_ERR, "unknown parameter %s in section [%s]", key, context);
        }
    }
    else if (static_cast<cfg::debug::config>(this->variables).value) {
        LOG(LOG_ERR, "unknown section [%s]", context);
    }
}

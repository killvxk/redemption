/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2011-2013
   Author(s): Christophe Grosjean, Martin Potier

   Unit test of Drawing primitive used to create snapshot/movies
   Using lib boost functions for testing
*/

#define RED_TEST_MODULE TestGraphicable
#include "test_only/test_framework/redemption_unit_tests.hpp"

#include "test_only/check_sig.hpp"
#include "utils/bitmap.hpp"
#include "utils/drawable.hpp"
#include "utils/drawable_pointer.hpp"
#include "utils/ellipse.hpp"
#include "utils/timestamp_tracer.hpp"
#include "utils/png.hpp"
#include "core/RDP/rdp_pointer.hpp"


RED_AUTO_TEST_CASE(TestLineTo)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(WHITE));
    gd.opaquerect(screen_rect.shrink(5), gd.u32bgr_to_color(BLACK));

    uint16_t y = screen_rect.cy - 1;
    for (uint16_t x = 0 ; x < screen_rect.cx ; x += 40){
        gd.draw_line(0, 0, 0, x, y, 0xCC, gd.u32bgr_to_color(GREEN), screen_rect);
        gd.draw_line(0, x + 10, y , 0, 0, 0xCC, gd.u32bgr_to_color(RED), screen_rect);
        gd.draw_line(0, screen_rect.cx - 1, 0, screen_rect.cx - 1 - x, y, 0xCC, gd.u32bgr_to_color(WHITE), screen_rect);
        gd.draw_line(0, screen_rect.cx - 1 - x + 10, y, screen_rect.cx - 1, 0, 0xCC, gd.u32bgr_to_color(BLUE), screen_rect);
    }
    gd.draw_line(0, 0, 0, 640, 480, 0xCC, gd.u32bgr_to_color(GREEN), screen_rect);

    gd.draw_line(0, 0, 0, 1024, 0, 0xCC, gd.u32bgr_to_color(PINK), screen_rect);
    gd.draw_line(0, 0, 0, 0, 768, 0xCC, gd.u32bgr_to_color(PINK), screen_rect);
    gd.draw_line(0, 639, 0, 639, 768, 0xCC, gd.u32bgr_to_color(PINK), screen_rect);
    gd.draw_line(0, 0, 479, 1024, 479, 0xCC, gd.u32bgr_to_color(PINK), screen_rect);

    gd.draw_line(10, 0, 10, 1024, 479, 0xCC, gd.u32bgr_to_color(PINK), screen_rect.shrink(5));

    RED_CHECK_SIG(gd, "\xba\x61\xe0\xa7\x5a\x4d\xc0\xf1\xfd\xaf\x57\x73\x04\x9f\xc9\xb5\xd4\xba\x75\x6a");

    // uncomment to see result in png file
    //save_to_png("/tmp/test_line_000.png", gd.impl());
    //dump_png("/tmp/test_line_005_", gd.impl());
}

RED_AUTO_TEST_CASE(TestEllipse)
{
    uint16_t width = 1280;
    uint16_t height = 1024;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(WHITE));
    gd.opaquerect(screen_rect.shrink(5), gd.u32bgr_to_color(LIGHT_GREEN));

//     uint64_t usec = ustime();
//     uint64_t cycles = rdtsc();

    gd.ellipse(Ellipse(Rect(2, 200, 540, 32)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

//     uint64_t elapusec = ustime() - usec;
//     uint64_t elapcyc = rdtsc() - cycles;
//     LOG(LOG_INFO, "elapsed time = %llu %llu %f\n", elapusec, elapcyc, (double)elapcyc / (double)elapusec);
//
//     usec = ustime();
//     cycles = rdtsc();

    gd.ellipse(Ellipse(Rect(100, 2, 40, 400)), 0x06, 0x01, gd.u32bgr_to_color(RED));

//     elapusec = ustime() - usec;
//     elapcyc = rdtsc() - cycles;
//     LOG(LOG_INFO, "elapsed time = %llu %llu %f\n", elapusec, elapcyc, (double)elapcyc / (double)elapusec);
//
//     usec = ustime();
//     cycles = rdtsc();

    gd.ellipse(Ellipse(Rect(2, 300, 540, 32)), 0x06, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(200, 2, 40, 400)), 0x06, 0x00, gd.u32bgr_to_color(RED));

    gd.ellipse(Ellipse(Rect(2, 600, 540, 32)), 0x0D, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(200, 500, 40, 401)), 0x0D, 0x00, gd.u32bgr_to_color(RED));

    gd.ellipse(Ellipse(Rect(2, 610, 540, 32)), 0x0D, 0x01, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(300, 500, 40, 401)), 0x0D, 0x01, gd.u32bgr_to_color(RED));



    gd.ellipse(Ellipse(Rect(700, 12, 6, 6)), 0x0D, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(715, 12, 6, 6)), 0x0D, 0x01, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(730, 12, 6, 6)), 0x06, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(745, 12, 6, 6)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(700, 28, 5, 5)), 0x0D, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(715, 28, 5, 5)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(730, 28, 5, 5)), 0x06, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(745, 28, 5, 5)), 0x06, 0x01, gd.u32bgr_to_color(GREEN));

    gd.ellipse(Ellipse(Rect(800, 12, 8, 8)), 0x0D, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(815, 12, 8, 8)), 0x0D, 0x01, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(830, 12, 8, 8)), 0x06, 0x00, gd.u32bgr_to_color(BLUE));
    gd.ellipse(Ellipse(Rect(845, 12, 8, 8)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(800, 38, 15, 15)), 0x0D, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(815, 38, 15, 15)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(830, 38, 15, 15)), 0x06, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(845, 38, 15, 15)), 0x06, 0x01, gd.u32bgr_to_color(GREEN));

    gd.ellipse(Ellipse(Rect(800, 88, 5, 15)), 0x0D, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(815, 88, 5, 15)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(830, 88, 5, 15)), 0x06, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(845, 88, 5, 15)), 0x06, 0x01, gd.u32bgr_to_color(GREEN));

    gd.ellipse(Ellipse(Rect(700, 88, 10, 10)), 0x0D, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(715, 88, 10, 10)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(730, 88, 10, 10)), 0x06, 0x00, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(745, 88, 10, 10)), 0x06, 0x01, gd.u32bgr_to_color(GREEN));

    gd.ellipse(Ellipse(Rect(700, 888, 40, 30)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(750, 888, 40, 30)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(800, 888, 40, 30)), 0x06, 0x00, gd.u32bgr_to_color(MEDIUM_BLUE));
    gd.ellipse(Ellipse(Rect(850, 888, 40, 30)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(700, 930, 30, 40)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(750, 930, 30, 40)), 0x0D, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(800, 930, 30, 40)), 0x06, 0x00, gd.u32bgr_to_color(MEDIUM_BLUE));
    gd.ellipse(Ellipse(Rect(850, 930, 30, 40)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(700, 600, 230, 140)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(750, 530, 310, 240)), 0x07, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(800, 700, 130, 140)), 0x0E, 0x00, gd.u32bgr_to_color(MEDIUM_BLUE));
    gd.ellipse(Ellipse(Rect(880, 700, 130, 40)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(600, 300, 120, 120)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(650, 300, 130, 130)), 0x07, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(700, 300, 140, 140)), 0x0E, 0x00, gd.u32bgr_to_color(MEDIUM_BLUE));
    gd.ellipse(Ellipse(Rect(750, 300, 130, 130)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(900, 20, 120, 130)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(1000, 30, 120, 130)), 0x07, 0x01, gd.u32bgr_to_color(GREEN));
    gd.ellipse(Ellipse(Rect(910, 200, 120, 140)), 0x0E, 0x00, gd.u32bgr_to_color(MEDIUM_BLUE));
    gd.ellipse(Ellipse(Rect(1000, 180, 140, 120)), 0x06, 0x01, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(1000, 400, 130, 140)), 0x0D, 0x00, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(1100, 550, 140, 130)), 0x0D, 0x00, gd.u32bgr_to_color(BLUE));

    gd.ellipse(Ellipse(Rect(1030, 430, 65, 70)), 0x0D, 0x00, gd.u32bgr_to_color(RED));

    // binary raster operations

    gd.ellipse(Ellipse(Rect(300, 10, 30, 40)), 0x02, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(300, 55, 30, 40)), 0x03, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(300, 105, 30, 40)), 0x04, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(300, 155, 30, 40)), 0x05, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(350, 10, 30, 40)), 0x08, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(350, 55, 30, 40)), 0x09, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(350, 105, 30, 40)), 0x0A, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(350, 155, 30, 40)), 0x0C, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(400, 10, 30, 40)), 0x0F, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(400, 55, 30, 40)), 0x01, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(400, 105, 30, 40)), 0x10, 0x01, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(400, 105, 30, 40)), 0x10, 0x0B, gd.u32bgr_to_color(RED));
    gd.ellipse(Ellipse(Rect(400, 155, 30, 40)), 0x06, 0x01, gd.u32bgr_to_color(RED));

//     elapusec = ustime() - usec;
//     elapcyc = rdtsc() - cycles;
//
//     LOG(LOG_INFO, "elapsed time = %llu %llu %f\n", elapusec, elapcyc, (double)elapcyc / (double)elapusec);

    RED_CHECK_SIG(gd, "\xa7\xa0\x72\x43\x8a\x05\x86\xc7\xdd\xf6\x38\xc1\x7e\xa4\x9d\x20\x2a\x39\xdf\x4e");

    // uncomment to see result in png file
    //save_to_png("/tmp/test_ellipse_001.png", gd.impl());
}

RED_AUTO_TEST_CASE(TestPatBlt)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    gd.patblt(screen_rect, 0xFF, gd.u32bgr_to_color(WHITE));
    gd.patblt(screen_rect.shrink(5), 0x00, gd.u32bgr_to_color(WHITE));


    gd.opaquerect(screen_rect.shrink(10), gd.u32bgr_to_color(RED));
    // RED inverted becomes CYAN
    gd.patblt(screen_rect.shrink(15), 0x55, gd.u32bgr_to_color(WHITE));

    gd.opaquerect(screen_rect.shrink(20), gd.u32bgr_to_color(RED));
    // Should be Black
    gd.patblt(screen_rect.shrink(25), 0x05, gd.u32bgr_to_color(0xFFFF00));

    gd.opaquerect(screen_rect.shrink(30), gd.u32bgr_to_color(RED));
    // Should be RED
    gd.patblt(screen_rect.shrink(35), 0x0F, gd.u32bgr_to_color(0xFFFF00));

    gd.opaquerect(screen_rect.shrink(40), gd.u32bgr_to_color(GREEN));
    // Should be BLUE
    gd.patblt(screen_rect.shrink(45), 0x50, gd.u32bgr_to_color(0xFFFF00));

    gd.opaquerect(screen_rect.shrink(50), gd.u32bgr_to_color(GREEN));
    // Should be purple
    gd.patblt(screen_rect.shrink(55), 0x5A, gd.u32bgr_to_color(WHITE));

    gd.opaquerect(screen_rect.shrink(60), gd.u32bgr_to_color(GREEN));
    // Should be purple
    gd.patblt(screen_rect.shrink(65), 0x5F, gd.u32bgr_to_color(0xFFFF00));

    gd.opaquerect(screen_rect.shrink(70), gd.u32bgr_to_color(0xFF00FF));
    // Should be blue
    gd.patblt(screen_rect.shrink(75), 0xA0, gd.u32bgr_to_color(0xFFFF00));

    gd.opaquerect(screen_rect.shrink(80), gd.u32bgr_to_color(GREEN));
    // Should be GREEN
    gd.patblt(screen_rect.shrink(85), 0xA5, gd.u32bgr_to_color(WHITE));

    gd.opaquerect(screen_rect.shrink(90), gd.u32bgr_to_color(RED));
    // Should be white
    gd.patblt(screen_rect.shrink(95), 0xAF, gd.u32bgr_to_color(RED));

    gd.opaquerect(screen_rect.shrink(100), gd.u32bgr_to_color(GREEN));
    // Should be 0x2F2F2F Dark Grey
    gd.patblt(screen_rect.shrink(105), 0xF0, gd.u32bgr_to_color(0x2F2F2F));

    gd.opaquerect(screen_rect.shrink(110), gd.u32bgr_to_color(0xFF00FF));
    // Should be yellow
    gd.patblt(screen_rect.shrink(115), 0xF5, gd.u32bgr_to_color(RED));

    gd.opaquerect(screen_rect.shrink(120), gd.u32bgr_to_color(RED));
    // Should be purple
    gd.patblt(screen_rect.shrink(125), 0xFA, gd.u32bgr_to_color(BLUE));

    RED_CHECK_SIG(gd, "\x87\x16\x73\x28\x21\x64\x9a\x4a\xea\x25\x60\xe5\x40\x32\x6e\xac\x28\x63\xe5\xad");

    // uncomment to see result in png file
    //dump_png("/tmp/test_patblt_000_", gd.impl());
}

RED_AUTO_TEST_CASE(TestDestBlt)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    //gd.patblt(screen_rect, 0xFF, gd.u32bgr_to_color(WHITE));
    gd.destblt(screen_rect, 0xFF); // WHITENESS
    gd.destblt(screen_rect.shrink(5), 0x00); // BLACKNESS
    gd.opaquerect(screen_rect.shrink(10), gd.u32bgr_to_color(RED)); // RED
    // RED inverted becomes CYAN
    gd.destblt(screen_rect.shrink(15), 0x55);

    RED_CHECK_SIG(gd, "\x5b\x24\xc7\xec\x13\x7f\xf9\x8a\x32\x59\x62\x50\xef\x6b\x37\x1f\x15\x14\xfc\xbb");

    // uncomment to see result in png file
    //dump_png("/tmp/test_destblt_000_", gd.impl());
}

RED_AUTO_TEST_CASE(TestAddMouse)
{

    Pointer p = drawable_default_pointer(true);
    auto av     = p.get_24bits_xor_mask();
    auto avmask = p.get_monochrome_and_mask();

    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    uint8_t  save_mouse[3072];   // 32 lines * 32 columns * 3 bytes per pixel = 3072 octets
    DrawablePointer current_pointer;
    current_pointer.initialize(32, 32, av.data(), avmask.data());

    gd.opaquerect(screen_rect, gd.u32bgr_to_color(RED)); // RED
    gd.trace_mouse(&current_pointer, 100, 100, save_mouse);

    // uncomment to see result in png file
//    dump_png24("./test_mouse_000_.png", gd, true);

    RED_CHECK_SIG(gd, "\x75\xc6\xe6\x3b\xd3\x22\x88\x14\x27\x03\xf3\x3e\x3c\x90\x5f\xac\xc1\x5c\x61\xa0");


    gd.clear_mouse(&current_pointer, 100, 100, save_mouse);
    // uncomment to see result in png file
//    dump_png24("./test_mouse_001_.png", gd, true);

    RED_CHECK_SIG(gd, "\x2b\x74\x99\xee\x6a\x39\x35\x8b\x87\xe3\x61\xa7\x8f\x91\x38\xdd\x72\xb3\x46\x05");

}




RED_AUTO_TEST_CASE(TestAddMouse2)
{
    Pointer p = drawable_default_pointer(true);
    auto av     = p.get_24bits_xor_mask();
    auto avmask = p.get_monochrome_and_mask();

    // Create a simple capture image and dump it to file
    uint16_t width  = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    uint8_t  save_mouse[3072];   // 32 lines * 32 columns * 3 bytes per pixel = 3072 octets
    DrawablePointer current_pointer;
    current_pointer.initialize(32, 32, av.data(), avmask.data());

    gd.opaquerect(screen_rect, gd.u32bgr_to_color(RED)); // RED

    gd.trace_mouse(&current_pointer, 638, 470, save_mouse);
    // uncomment to see result in png file
//    dump_png24("test_mouse2_visible_.png", gd, true);

    RED_CHECK_SIG(gd, "\x8f\x9d\x96\xc4\x33\xff\x56\xac\xe4\x9b\x42\xc7\xfb\x83\xf6\xc5\x9d\x12\xd8\x9d");


    gd.clear_mouse(&current_pointer, 638, 470, save_mouse);
    // uncomment to see result in png file
//    dump_png24("test_mouse2_clear_.png", gd, true);
    RED_CHECK_SIG(gd, "\x2b\x74\x99\xee\x6a\x39\x35\x8b\x87\xe3\x61\xa7\x8f\x91\x38\xdd\x72\xb3\x46\x05");
}

RED_AUTO_TEST_CASE(TestAddMouse3)
{
    Pointer p = drawable_default_pointer(true);
    auto av     = p.get_24bits_xor_mask();
    auto avmask = p.get_monochrome_and_mask();

    // Create a simple capture image and dump it to file
    uint16_t width  = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    uint8_t  save_mouse[3072];   // 32 lines * 32 columns * 3 bytes per pixel = 3072 octets
    DrawablePointer current_pointer;
    current_pointer.initialize(32, 32, av.data(), avmask.data());

    gd.opaquerect(screen_rect, gd.u32bgr_to_color(RED)); // RED
    gd.trace_mouse(&current_pointer, -8, -8, save_mouse);
    // uncomment to see result in png file
//    dump_png24("test_mouse3_visible_.png", gd, true);

    RED_CHECK_SIG(gd, "\x2b\x74\x99\xee\x6a\x39\x35\x8b\x87\xe3\x61\xa7\x8f\x91\x38\xdd\x72\xb3\x46\x05");


    gd.clear_mouse(&current_pointer, -8, -8, save_mouse);
    RED_CHECK_SIG(gd, "\x2b\x74\x99\xee\x6a\x39\x35\x8b\x87\xe3\x61\xa7\x8f\x91\x38\xdd\x72\xb3\x46\x05");

    // uncomment to see result in png file
    //dump_png("test_mouse3_clear_", gd.impl());
}

RED_AUTO_TEST_CASE(TestTimestampMouse)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);
    Drawable gd(width, height);
    TimestampTracer timestamp_tracer(gdi::get_mutable_image_view(gd));
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(RED)); // RED

    time_t rawtime;
    time(&rawtime);
    struct tm now;

    now.tm_sec  =  51;
    now.tm_min  =  11;
    now.tm_hour =  13;
    now.tm_mday =   8;
    now.tm_mon  =   2;
    now.tm_year = 112;
    now.tm_wday =   4;
    now.tm_yday =  67;
    now.tm_isdst =  0;

    timestamp_tracer.trace(now);
    RED_CHECK_SIG(gd, "\x0d\x64\x40\x8c\xcb\x82\xd6\x29\x9b\x55\x83\x87\x3d\xd9\x69\xb6\xd7\x5b\x0d\x3d");

    // uncomment to see result in png file
    //dump_png("/tmp/test_timestamp_000_", gd.impl());


    now.tm_sec  =  00;
    now.tm_min  =  12;
    now.tm_hour =  13;
    now.tm_mday =   8;
    now.tm_mon  =   2;
    now.tm_year = 113;
    now.tm_wday =   4;
    now.tm_yday =  67;
    now.tm_isdst =  0;

    timestamp_tracer.clear();
    timestamp_tracer.trace(now);
    RED_CHECK_SIG(gd, "\x9c\x75\xcc\x7e\x0e\xa2\x3b\x61\xef\x53\x9a\x64\x66\x06\x57\x05\xa1\xe6\x4f\xf0");

    // uncomment to see result in png file
    //dump_png("/tmp/test_timestamp_001_", gd.impl());

    timestamp_tracer.clear();
    RED_CHECK_SIG(gd, "\x2b\x74\x99\xee\x6a\x39\x35\x8b\x87\xe3\x61\xa7\x8f\x91\x38\xdd\x72\xb3\x46\x05");

    // uncomment to see result in png file
    //dump_png("/tmp/test_timestamp_002_", gd.impl());
}

inline void test_scrblt2_impl(Drawable & gd, const uint8_t rop, const int cx, const int cy, const char * name){
    gd.opaquerect(Rect(90, 90, 120, 120), gd.u32bgr_to_color(RED));
    gd.opaquerect(Rect(100, 100, 100, 100), gd.u32bgr_to_color(BLUE));
    gd.opaquerect(Rect(120, 120, 60, 60).intersect(Rect(100, 100, 100, 100)), gd.u32bgr_to_color(PINK));
    gd.scrblt(90, 90, Rect(300, 300, 120, 120), 0xCC);
    gd.scrblt(90, 90, Rect(90 + cx, 90 + cy, 120, 120), rop);

    (void)name;
    // uncomment to see result in png file
    //char tmpname[128];
    //sprintf(tmpname, "/tmp/test_scrblt_%s", name);
    //dump_png(tmpname, gd.impl());
}

#define test_scrblt2(rop, cx, cy, name, sig) do { \
    Drawable gd(640, 480);                        \
    test_scrblt2_impl(gd, rop, cx, cy, name);     \
    RED_CHECK_SIG(gd, sig);                           \
} while (0)

RED_AUTO_TEST_CASE(TestGraphicableScrBltDown)
{
    test_scrblt2(0x00, 0, 20, "down00",
    "\xf8\xbd\xd7\x1d\x93\x78\x8c\xd9\x7a\x88\x6d\xfe\x52\x71\xe5\xaf\x7d\xba\x61\x46");
}

//RED_AUTO_TEST_CASE(TestGraphicableScrBltDown)
//{
//    test_scrblt(0x00, 0, 20, "down00",
//    "\x3c\x39\xae\x2b\x84\x5b\xc6\xa8\x75\xc1\xaf\xbb\x5c\x26\xa9\x1f\x94\x24\xc4\x68");
//}

RED_AUTO_TEST_CASE(TestGraphicableScrBltRight)
{
    test_scrblt2(0x00, 20, 0, "right00",
    "\x76\xbb\x56\xf5\x70\xec\x7e\x19\xc7\x68\xe6\x32\xb3\x43\xf1\xc8\xf1\x78\x6e\xf1");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltLeft)
{
    test_scrblt2(0x00, -20, 0, "left00",
    "\x05\xdf\xba\x3b\x9f\xa9\x5d\x1c\xa9\x12\xa0\x0b\x1d\x10\x26\x68\x41\xc7\x73\xd9");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltUp)
{
    test_scrblt2(0x00, 0, -20, "up00",
    "\x55\x73\x7e\xd8\x0a\x36\xde\x1c\x87\xb3\xbb\x78\x6c\xaf\xb2\xcf\x53\xab\xa2\xe6");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltLeftUp)
{
    test_scrblt2(0x00, -20, -20, "left_up00",
    "\xb6\x9a\xe7\xd0\x97\xe1\x3b\xce\x8d\xef\x73\x43\xd2\x50\xba\xd0\x06\xe1\x6c\xca");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltDown11)
{
    test_scrblt2(0x11, 0, 20, "down11",
    "\xd4\x3a\x6e\xea\x67\xe4\x0c\xe2\xc9\xde\xd0\x0f\x3f\xd7\x2d\x26\x93\xcf\x40\x53");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltRight11)
{
    test_scrblt2(0x11, 20, 0, "right11",
    "\x44\x93\x9e\xf8\x40\x9d\x18\x24\x27\xcf\x53\x76\xde\xd6\x05\x0f\x33\x65\x79\xfc");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltLeft11)
{
    test_scrblt2(0x11, -20, 0, "left11",
    "\x8b\x54\x94\x20\x65\xf3\x91\x64\x9a\x25\xca\x18\x18\x46\x0c\x1f\x00\x22\x18\x7c");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltUp11)
{
    test_scrblt2(0x11, 0, -20, "up11",
    "\x82\x1a\x1c\xa5\xe2\x53\x37\xbd\x39\x21\x74\xd6\xd8\x57\xd7\xaf\xaf\xe0\xc9\x18");
}

RED_AUTO_TEST_CASE(TestGraphicableScrBltLeftUp11)
{
    test_scrblt2(0x11, -20, -20, "left_up11",
    "\x02\xb8\x82\xa6\x44\x12\x7c\xcd\xb6\x38\xa3\xef\x1c\xe7\xaa\x54\xcd\xf2\x75\xdb");
}

RED_AUTO_TEST_CASE(TestMemblt)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 640;
    uint16_t height = 480;
    Rect screen_rect(0, 0, width, height);

    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(0x2F2F2F));
    gd.opaquerect(Rect(100,100,20, 20), gd.u32bgr_to_color(BLUE));

    uint8_t comp64x64RED[] = { 0xc0, 0x30, 0x00, 0x00, 0xFF, 0xf0, 0xc0, 0x0f, };
    BGRPalette const & palette332 = BGRPalette::classic_332();
    Bitmap bmp(BitsPerPixel{24}, BitsPerPixel{24}, &palette332, 64, 64, comp64x64RED, sizeof(comp64x64RED), true );

    gd.mem_blt(Rect(5, 5, 20, 20), bmp, 0, 0);
    gd.mem_blt_invert(Rect(25, 25, 20, 20), bmp, 0, 0);
    gd.black_color(Rect(45, 45, 20, 20));
    gd.white_color(Rect(65, 65, 20, 20));

    RED_CHECK_SIG(gd, "\x98\x6c\x40\x0b\x3a\xbc\x39\x38\x29\x11\x77\x37\x98\xe2\x27\xb2\xcb\x61\xec\x5d");

    // uncomment to see result in png file
    //dump_png("./test_memblt_", gd.impl());
}

RED_AUTO_TEST_CASE(TestMemblt2)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 320;
    uint16_t height = 200;
    Rect screen_rect(0, 0, width, height);

    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(0x2F2F2F));

    uint8_t raw_palette[] = {
/* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00,  // ................
/* 0010 */ 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x00,  // ................
/* 0020 */ 0xc0, 0xdc, 0xc0, 0x00, 0xc8, 0xd0, 0xd4, 0x00, 0x01, 0x1f, 0x3f, 0x00, 0x01, 0x1f, 0x5f, 0x00,  // ..........?..._.
/* 0030 */ 0x01, 0x1f, 0x7f, 0x00, 0x01, 0x1f, 0x9f, 0x00, 0x01, 0x1f, 0xbf, 0x00, 0x01, 0x1f, 0xdf, 0x00,  // ................
/* 0040 */ 0x01, 0x3f, 0x01, 0x00, 0x01, 0x3f, 0x1f, 0x00, 0x01, 0x3f, 0x3f, 0x00, 0x01, 0x3f, 0x5f, 0x00,  // .?...?...??..?_.
/* 0050 */ 0x01, 0x3f, 0x7f, 0x00, 0x01, 0x3f, 0x9f, 0x00, 0x01, 0x3f, 0xbf, 0x00, 0x01, 0x3f, 0xdf, 0x00,  // .?...?...?...?..
/* 0060 */ 0x01, 0x5f, 0x01, 0x00, 0x01, 0x5f, 0x1f, 0x00, 0x01, 0x5f, 0x3f, 0x00, 0x01, 0x5f, 0x5f, 0x00,  // ._..._..._?..__.
/* 0070 */ 0x01, 0x5f, 0x7f, 0x00, 0x01, 0x5f, 0x9f, 0x00, 0x01, 0x5f, 0xbf, 0x00, 0x01, 0x5f, 0xdf, 0x00,  // ._..._..._..._..
/* 0080 */ 0x01, 0x7f, 0x01, 0x00, 0x01, 0x7f, 0x1f, 0x00, 0x01, 0x7f, 0x3f, 0x00, 0x01, 0x7f, 0x5f, 0x00,  // ..........?..._.
/* 0090 */ 0x01, 0x7f, 0x7f, 0x00, 0x01, 0x7f, 0x9f, 0x00, 0x01, 0x7f, 0xbf, 0x00, 0x01, 0x7f, 0xdf, 0x00,  // ................
/* 00a0 */ 0x01, 0x9f, 0x01, 0x00, 0x01, 0x9f, 0x1f, 0x00, 0x01, 0x9f, 0x3f, 0x00, 0x01, 0x9f, 0x5f, 0x00,  // ..........?..._.
/* 00b0 */ 0x01, 0x9f, 0x7f, 0x00, 0x01, 0x9f, 0x9f, 0x00, 0x01, 0x9f, 0xbf, 0x00, 0x01, 0x9f, 0xdf, 0x00,  // ................
/* 00c0 */ 0x01, 0xbf, 0x01, 0x00, 0x01, 0xbf, 0x1f, 0x00, 0x01, 0xbf, 0x3f, 0x00, 0x01, 0xbf, 0x5f, 0x00,  // ..........?..._.
/* 00d0 */ 0x01, 0xbf, 0x7f, 0x00, 0x01, 0xbf, 0x9f, 0x00, 0x01, 0xbf, 0xbf, 0x00, 0x01, 0xbf, 0xdf, 0x00,  // ................
/* 00e0 */ 0x01, 0xdf, 0x01, 0x00, 0x01, 0xdf, 0x1f, 0x00, 0x01, 0xdf, 0x3f, 0x00, 0x01, 0xdf, 0x5f, 0x00,  // ..........?..._.
/* 00f0 */ 0x01, 0xdf, 0x7f, 0x00, 0x01, 0xdf, 0x9f, 0x00, 0x01, 0xdf, 0xbf, 0x00, 0x01, 0xdf, 0xdf, 0x00,  // ................
/* 0100 */ 0x3f, 0x01, 0x01, 0x00, 0x3f, 0x01, 0x1f, 0x00, 0x3f, 0x01, 0x3f, 0x00, 0x3f, 0x01, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 0110 */ 0x3f, 0x01, 0x7f, 0x00, 0x3f, 0x01, 0x9f, 0x00, 0x3f, 0x01, 0xbf, 0x00, 0x3f, 0x01, 0xdf, 0x00,  // ?...?...?...?...
/* 0120 */ 0x3f, 0x1f, 0x01, 0x00, 0x3f, 0x1f, 0x1f, 0x00, 0x3f, 0x1f, 0x3f, 0x00, 0x3f, 0x1f, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 0130 */ 0x3f, 0x1f, 0x7f, 0x00, 0x3f, 0x1f, 0x9f, 0x00, 0x3f, 0x1f, 0xbf, 0x00, 0x3f, 0x1f, 0xdf, 0x00,  // ?...?...?...?...
/* 0140 */ 0x3f, 0x3f, 0x01, 0x00, 0x3f, 0x3f, 0x1f, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x3f, 0x3f, 0x5f, 0x00,  // ??..??..???.??_.
/* 0150 */ 0x3f, 0x3f, 0x7f, 0x00, 0x3f, 0x3f, 0x9f, 0x00, 0x3f, 0x3f, 0xbf, 0x00, 0x3f, 0x3f, 0xdf, 0x00,  // ??..??..??..??..
/* 0160 */ 0x3f, 0x5f, 0x01, 0x00, 0x3f, 0x5f, 0x1f, 0x00, 0x3f, 0x5f, 0x3f, 0x00, 0x3f, 0x5f, 0x5f, 0x00,  // ?_..?_..?_?.?__.
/* 0170 */ 0x3f, 0x5f, 0x7f, 0x00, 0x3f, 0x5f, 0x9f, 0x00, 0x3f, 0x5f, 0xbf, 0x00, 0x3f, 0x5f, 0xdf, 0x00,  // ?_..?_..?_..?_..
/* 0180 */ 0x3f, 0x7f, 0x01, 0x00, 0x3f, 0x7f, 0x1f, 0x00, 0x3f, 0x7f, 0x3f, 0x00, 0x3f, 0x7f, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 0190 */ 0x3f, 0x7f, 0x7f, 0x00, 0x3f, 0x7f, 0x9f, 0x00, 0x3f, 0x7f, 0xbf, 0x00, 0x3f, 0x7f, 0xdf, 0x00,  // ?...?...?...?...
/* 01a0 */ 0x3f, 0x9f, 0x01, 0x00, 0x3f, 0x9f, 0x1f, 0x00, 0x3f, 0x9f, 0x3f, 0x00, 0x3f, 0x9f, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 01b0 */ 0x3f, 0x9f, 0x7f, 0x00, 0x3f, 0x9f, 0x9f, 0x00, 0x3f, 0x9f, 0xbf, 0x00, 0x3f, 0x9f, 0xdf, 0x00,  // ?...?...?...?...
/* 01c0 */ 0x3f, 0xbf, 0x01, 0x00, 0x3f, 0xbf, 0x1f, 0x00, 0x3f, 0xbf, 0x3f, 0x00, 0x3f, 0xbf, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 01d0 */ 0x3f, 0xbf, 0x7f, 0x00, 0x3f, 0xbf, 0x9f, 0x00, 0x3f, 0xbf, 0xbf, 0x00, 0x3f, 0xbf, 0xdf, 0x00,  // ?...?...?...?...
/* 01e0 */ 0x3f, 0xdf, 0x01, 0x00, 0x3f, 0xdf, 0x1f, 0x00, 0x3f, 0xdf, 0x3f, 0x00, 0x3f, 0xdf, 0x5f, 0x00,  // ?...?...?.?.?._.
/* 01f0 */ 0x3f, 0xdf, 0x7f, 0x00, 0x3f, 0xdf, 0x9f, 0x00, 0x3f, 0xdf, 0xbf, 0x00, 0x3f, 0xdf, 0xdf, 0x00,  // ?...?...?...?...
/* 0200 */ 0x7f, 0x01, 0x01, 0x00, 0x7f, 0x01, 0x1f, 0x00, 0x7f, 0x01, 0x3f, 0x00, 0x7f, 0x01, 0x5f, 0x00,  // ..........?..._.
/* 0210 */ 0x7f, 0x01, 0x7f, 0x00, 0x7f, 0x01, 0x9f, 0x00, 0x7f, 0x01, 0xbf, 0x00, 0x7f, 0x01, 0xdf, 0x00,  // ................
/* 0220 */ 0x7f, 0x1f, 0x01, 0x00, 0x7f, 0x1f, 0x1f, 0x00, 0x7f, 0x1f, 0x3f, 0x00, 0x7f, 0x1f, 0x5f, 0x00,  // ..........?..._.
/* 0230 */ 0x7f, 0x1f, 0x7f, 0x00, 0x7f, 0x1f, 0x9f, 0x00, 0x7f, 0x1f, 0xbf, 0x00, 0x7f, 0x1f, 0xdf, 0x00,  // ................
/* 0240 */ 0x7f, 0x3f, 0x01, 0x00, 0x7f, 0x3f, 0x1f, 0x00, 0x7f, 0x3f, 0x3f, 0x00, 0x7f, 0x3f, 0x5f, 0x00,  // .?...?...??..?_.
/* 0250 */ 0x7f, 0x3f, 0x7f, 0x00, 0x7f, 0x3f, 0x9f, 0x00, 0x7f, 0x3f, 0xbf, 0x00, 0x7f, 0x3f, 0xdf, 0x00,  // .?...?...?...?..
/* 0260 */ 0x7f, 0x5f, 0x01, 0x00, 0x7f, 0x5f, 0x1f, 0x00, 0x7f, 0x5f, 0x3f, 0x00, 0x7f, 0x5f, 0x5f, 0x00,  // ._..._..._?..__.
/* 0270 */ 0x7f, 0x5f, 0x7f, 0x00, 0x7f, 0x5f, 0x9f, 0x00, 0x7f, 0x5f, 0xbf, 0x00, 0x7f, 0x5f, 0xdf, 0x00,  // ._..._..._..._..
/* 0280 */ 0x7f, 0x7f, 0x01, 0x00, 0x7f, 0x7f, 0x1f, 0x00, 0x7f, 0x7f, 0x3f, 0x00, 0x7f, 0x7f, 0x5f, 0x00,  // ..........?..._.
/* 0290 */ 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x9f, 0x00, 0x7f, 0x7f, 0xbf, 0x00, 0x7f, 0x7f, 0xdf, 0x00,  // ................
/* 02a0 */ 0x7f, 0x9f, 0x01, 0x00, 0x7f, 0x9f, 0x1f, 0x00, 0x7f, 0x9f, 0x3f, 0x00, 0x7f, 0x9f, 0x5f, 0x00,  // ..........?..._.
/* 02b0 */ 0x7f, 0x9f, 0x7f, 0x00, 0x7f, 0x9f, 0x9f, 0x00, 0x7f, 0x9f, 0xbf, 0x00, 0x7f, 0x9f, 0xdf, 0x00,  // ................
/* 02c0 */ 0x7f, 0xbf, 0x01, 0x00, 0x7f, 0xbf, 0x1f, 0x00, 0x7f, 0xbf, 0x3f, 0x00, 0x7f, 0xbf, 0x5f, 0x00,  // ..........?..._.
/* 02d0 */ 0x7f, 0xbf, 0x7f, 0x00, 0x7f, 0xbf, 0x9f, 0x00, 0x7f, 0xbf, 0xbf, 0x00, 0x7f, 0xbf, 0xdf, 0x00,  // ................
/* 02e0 */ 0x7f, 0xdf, 0x01, 0x00, 0x7f, 0xdf, 0x1f, 0x00, 0x7f, 0xdf, 0x3f, 0x00, 0x7f, 0xdf, 0x5f, 0x00,  // ..........?..._.
/* 02f0 */ 0x7f, 0xdf, 0x7f, 0x00, 0x7f, 0xdf, 0x9f, 0x00, 0x7f, 0xdf, 0xbf, 0x00, 0x7f, 0xdf, 0xdf, 0x00,  // ................
/* 0300 */ 0xbf, 0x01, 0x01, 0x00, 0xbf, 0x01, 0x1f, 0x00, 0xbf, 0x01, 0x3f, 0x00, 0xbf, 0x01, 0x5f, 0x00,  // ..........?..._.
/* 0310 */ 0xbf, 0x01, 0x7f, 0x00, 0xbf, 0x01, 0x9f, 0x00, 0xbf, 0x01, 0xbf, 0x00, 0xbf, 0x01, 0xdf, 0x00,  // ................
/* 0320 */ 0xbf, 0x1f, 0x01, 0x00, 0xbf, 0x1f, 0x1f, 0x00, 0xbf, 0x1f, 0x3f, 0x00, 0xbf, 0x1f, 0x5f, 0x00,  // ..........?..._.
/* 0330 */ 0xbf, 0x1f, 0x7f, 0x00, 0xbf, 0x1f, 0x9f, 0x00, 0xbf, 0x1f, 0xbf, 0x00, 0xbf, 0x1f, 0xdf, 0x00,  // ................
/* 0340 */ 0xbf, 0x3f, 0x01, 0x00, 0xbf, 0x3f, 0x1f, 0x00, 0xbf, 0x3f, 0x3f, 0x00, 0xbf, 0x3f, 0x5f, 0x00,  // .?...?...??..?_.
/* 0350 */ 0xbf, 0x3f, 0x7f, 0x00, 0xbf, 0x3f, 0x9f, 0x00, 0xbf, 0x3f, 0xbf, 0x00, 0xbf, 0x3f, 0xdf, 0x00,  // .?...?...?...?..
/* 0360 */ 0xbf, 0x5f, 0x01, 0x00, 0xbf, 0x5f, 0x1f, 0x00, 0xbf, 0x5f, 0x3f, 0x00, 0xbf, 0x5f, 0x5f, 0x00,  // ._..._..._?..__.
/* 0370 */ 0xbf, 0x5f, 0x7f, 0x00, 0xbf, 0x5f, 0x9f, 0x00, 0xbf, 0x5f, 0xbf, 0x00, 0xbf, 0x5f, 0xdf, 0x00,  // ._..._..._..._..
/* 0380 */ 0xbf, 0x7f, 0x01, 0x00, 0xbf, 0x7f, 0x1f, 0x00, 0xbf, 0x7f, 0x3f, 0x00, 0xbf, 0x7f, 0x5f, 0x00,  // ..........?..._.
/* 0390 */ 0xbf, 0x7f, 0x7f, 0x00, 0xbf, 0x7f, 0x9f, 0x00, 0xbf, 0x7f, 0xbf, 0x00, 0xbf, 0x7f, 0xdf, 0x00,  // ................
/* 03a0 */ 0xbf, 0x9f, 0x01, 0x00, 0xbf, 0x9f, 0x1f, 0x00, 0xbf, 0x9f, 0x3f, 0x00, 0xbf, 0x9f, 0x5f, 0x00,  // ..........?..._.
/* 03b0 */ 0xbf, 0x9f, 0x7f, 0x00, 0xbf, 0x9f, 0x9f, 0x00, 0xbf, 0x9f, 0xbf, 0x00, 0xbf, 0x9f, 0xdf, 0x00,  // ................
/* 03c0 */ 0xbf, 0xbf, 0x01, 0x00, 0xbf, 0xbf, 0x1f, 0x00, 0xbf, 0xbf, 0x3f, 0x00, 0xbf, 0xbf, 0x5f, 0x00,  // ..........?..._.
/* 03d0 */ 0xbf, 0xbf, 0x7f, 0x00, 0xbf, 0xbf, 0x9f, 0x00, 0xf0, 0xfb, 0xff, 0x00, 0xa5, 0x6e, 0x3a, 0x00,  // .............n:.
/* 03e0 */ 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,  // ................
/* 03f0 */ 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,  // ................
    };
    uint8_t raw_bitmap[] = {
/* 0000 */ 0xc0, 0x30, 0x09, 0x00, 0x63, 0x30, 0x09, 0xd0, 0x14, 0xf5, 0x07, 0x00, 0x00, 0xcf, 0x09, 0x03,  // .0..c0..........
/* 0010 */ 0x84, 0x06, 0x06, 0x06, 0xfc, 0xc7, 0xf8, 0x82, 0xfc, 0x06, 0xd0, 0x0a, 0xfc, 0x03, 0x00, 0x87,  // ................
/* 0020 */ 0xfc, 0xfc, 0x09, 0x09, 0xfc, 0x00, 0x00, 0xd0, 0x13, 0x09, 0x0f, 0x00, 0x00, 0xc7, 0x01, 0x07,  // ................
/* 0030 */ 0x82, 0xfe, 0xfc, 0x69, 0x07, 0x81, 0xfc, 0xd0, 0x09, 0xfb, 0x01, 0x00, 0x8c, 0x03, 0xfc, 0x09,  // ...i............
/* 0040 */ 0x09, 0x00, 0x00, 0x04, 0x04, 0xfc, 0xfc, 0xfc, 0xfc, 0xd0, 0x0d, 0x0d, 0x03, 0x00, 0x8a, 0x01,  // ................
/* 0050 */ 0x01, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x01, 0x01, 0x06, 0x8d, 0xfc, 0x07, 0x07, 0x00, 0x00,  // ................
/* 0060 */ 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0xfc, 0xd0, 0x0b, 0xfa, 0x01, 0x00, 0x83, 0x00, 0x04,  // ................
/* 0070 */ 0x04, 0x68, 0xfc, 0xd0, 0x0a, 0x0d, 0x01, 0x00, 0x83, 0x01, 0x01, 0xf9, 0x05, 0x84, 0x03, 0xf9,  // .h..............
/* 0080 */ 0xf9, 0xf9, 0x05, 0x84, 0x07, 0xff, 0x07, 0xf8, 0xd1, 0x07, 0x0f, 0x81, 0x07, 0xd0, 0x0a, 0xfa,  // ................
/* 0090 */ 0x01, 0x00, 0x8d, 0xfc, 0x04, 0x04, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0x00, 0xfc, 0xfc, 0xfc, 0xfc,  // ................
/* 00a0 */ 0xd0, 0x08, 0x0d, 0x01, 0x00, 0x92, 0x01, 0x01, 0xf9, 0xf9, 0xf9, 0x03, 0x03, 0x01, 0x03, 0x03,  // ................
/* 00b0 */ 0x03, 0x03, 0x03, 0x03, 0x09, 0x09, 0x09, 0xf8, 0xd0, 0x0c, 0xf8, 0x77, 0x00, 0xd0, 0x09, 0x04,  // ...........w....
/* 00c0 */ 0x01, 0x00, 0x8a, 0x03, 0xfc, 0x04, 0xfc, 0xfc, 0xfc, 0x09, 0x09, 0x09, 0x09, 0xd0, 0x0d, 0xfc,  // ................
/* 00d0 */ 0x01, 0x00, 0x8a, 0xf9, 0xf9, 0xf9, 0xf9, 0x03, 0x01, 0x04, 0x04, 0x04, 0x03, 0xd0, 0x1d, 0xf8,  // ................
/* 00e0 */ 0x01, 0x03, 0x00, 0x00, 0xd0, 0x09, 0x04, 0x01, 0x00, 0x6c, 0x09, 0x01, 0x81, 0x03, 0x05, 0x86,  // .........l......
/* 00f0 */ 0x03, 0x03, 0xf8, 0x04, 0x03, 0xfb, 0xd0, 0x0a, 0xf8, 0x81, 0x01, 0xd0, 0x11, 0xff, 0x01, 0x00,  // ................
/* 0100 */ 0x00, 0x86, 0xfb, 0x03, 0xfc, 0xfc, 0xfc, 0xfc, 0xc9, 0x0d, 0x0c, 0x86, 0x03, 0x06, 0x06, 0xf8,  // ................
/* 0110 */ 0x06, 0x04, 0xd0, 0x08, 0x07, 0x01, 0x00, 0x86, 0xff, 0x07, 0xf8, 0xff, 0x03, 0x03, 0x40, 0x0e,  // ..............@.
/* 0120 */ 0x01, 0x00, 0x81, 0x09, 0xd0, 0x19, 0xf8, 0xc3, 0x3f, 0x00, 0x00, 0x8f, 0x03, 0x03, 0x06, 0x06,  // ........?.......
/* 0130 */ 0x06, 0x06, 0x06, 0x04, 0x07, 0x07, 0x03, 0x09, 0x09, 0x09, 0x06, 0x40, 0x06, 0x45, 0x86, 0x03,  // ...........@.E..
/* 0140 */ 0x00, 0xf8, 0x07, 0x07, 0x07, 0xd0, 0x09, 0xfc, 0x01, 0x00, 0x8a, 0x04, 0x03, 0xfb, 0xfc, 0xfc,  // ................
/* 0150 */ 0xfc, 0x09, 0x09, 0x09, 0x09, 0x40, 0x0e, 0x01, 0x00, 0x9d, 0x03, 0x03, 0x03, 0xf8, 0x06, 0x06,  // .....@..........
/* 0160 */ 0x06, 0x06, 0x06, 0x06, 0x07, 0xfb, 0x09, 0x09, 0x09, 0x06, 0xfc, 0x07, 0xff, 0xf8, 0xf8, 0xf8,  // ................
/* 0170 */ 0x03, 0xfb, 0x03, 0x00, 0xf8, 0x07, 0x04, 0xd0, 0x09, 0xf8, 0x01, 0x00, 0x8e, 0x09, 0x04, 0x03,  // ................
/* 0180 */ 0xfb, 0xfc, 0xfc, 0xfc, 0x09, 0x09, 0x00, 0xfc, 0xfc, 0xfc, 0x04, 0x68, 0x09, 0xd0, 0x12, 0xfe,  // ...........h....
/* 0190 */ 0x80, 0x00, 0x00, 0x8b, 0x06, 0xfc, 0x07, 0xff, 0xff, 0x07, 0xff, 0x03, 0xfb, 0x03, 0x00, 0xd0,  // ................
/* 01a0 */ 0x0d, 0x03, 0x03, 0x00, 0x87, 0x04, 0x03, 0xfb, 0xfc, 0xfc, 0x04, 0x04, 0xd0, 0x12, 0xfc, 0x01,  // ................
/* 01b0 */ 0x00, 0x00, 0x66, 0x06, 0xfd, 0x06, 0x8c, 0xfe, 0x06, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0x03,  // ..f.............
/* 01c0 */ 0xfb, 0x03, 0x00, 0xd0, 0x0b, 0xfb, 0x01, 0x00, 0x8c, 0x09, 0x04, 0xfc, 0xfc, 0xfb, 0xfc, 0xfc,  // ................
/* 01d0 */ 0xfc, 0xfc, 0xfc, 0xfc, 0x04, 0x69, 0x09, 0x01, 0x9f, 0xf9, 0x03, 0xf8, 0xf8, 0xf8, 0xf8, 0x06,  // .....i..........
/* 01e0 */ 0xfe, 0xfe, 0x06, 0x06, 0x07, 0x06, 0x00, 0x09, 0x09, 0x09, 0x06, 0x06, 0x06, 0x06, 0x06, 0xf8,  // ................
/* 01f0 */ 0xf8, 0xf8, 0xf8, 0xf8, 0x03, 0xfb, 0x03, 0x00, 0xd0, 0x0b, 0x04, 0x01, 0x00, 0x82, 0x09, 0x04,  // ................
/* 0200 */ 0x67, 0xfc, 0x83, 0x04, 0x09, 0x09, 0xd0, 0x08, 0xf5, 0x01, 0x00, 0x8e, 0x00, 0x03, 0xf8, 0xf8,  // g...............
/* 0210 */ 0x06, 0x06, 0x07, 0x07, 0xfe, 0x06, 0x07, 0x06, 0x00, 0x00, 0x6e, 0x09, 0x83, 0x03, 0xf9, 0x01,  // ..........n.....
/* 0220 */ 0x6f, 0x09, 0xd0, 0x12, 0x0d, 0x40, 0x00, 0x00, 0x82, 0x00, 0x00, 0x67, 0x07, 0x81, 0x06, 0xd0,  // o....@.....g....
/* 0230 */ 0x10, 0x06, 0x01, 0x00, 0x00, 0x81, 0x09, 0xd0, 0x10, 0xf8, 0x01, 0x00, 0x00, 0xc5, 0xf5, 0x42,  // ...............B
/* 0240 */ 0x1e, 0x00, 0x6b, 0x00, 0x0f, 0x60, 0x91, 0x09,                          // ..k..`..
    };

    const BGRPalette palette = make_bgr_palette_from_bgrx_array(raw_palette);

    Bitmap bmp(BitsPerPixel{8}, BitsPerPixel{8}, &palette, 64, 22, raw_bitmap, sizeof(raw_bitmap), true);

    // red square
    gd.mem_blt(Rect(5, 5, 20, 20), bmp, 0, 0);
    RED_CHECK_SIG(gd, "\xd1\x63\x42\x01\x2f\xec\x9d\x81\x31\xfe\xa6\xdc\x01\xd5\xd1\x17\x99\x65\xe5\xda");

    // uncomment to see result in png file
    //dump_png("./test_memblt2_", gd.impl());
}

RED_AUTO_TEST_CASE(TestMemblt3)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 320;
    uint16_t height = 200;
    Rect screen_rect(0, 0, width, height);

    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(0x2F2F2F));

    uint8_t raw_palette[] = {
/* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0030 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0040 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0050 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0080 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0090 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0100 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0110 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0120 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0130 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0140 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0150 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0160 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0170 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0180 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0190 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0200 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0210 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0220 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0230 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0240 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0250 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0260 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0270 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0280 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0290 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0300 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0310 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0320 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0330 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0340 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0350 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0360 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0370 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0380 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0390 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
    };
    uint8_t raw_bitmap[] = {
/* 0000 */ 0xc0, 0x0c, 0xb4, 0x1d, 0x84, 0xb4, 0x1d, 0xb4, 0x1d, 0xb4, 0x1d, 0xb4, 0x1d, 0xf0, 0x60, 0x01,  // ..............`.
/* 0010 */ 0xc0, 0x04, 0xed, 0x76, 0x00, 0x2e, 0xce, 0x70, 0x4e, 0x11, 0x8f, 0x08, 0x21, 0x52, 0x4a, 0x11,  // ...v...pN...!RJ.
/* 0020 */ 0x42, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0xf0, 0x3d, 0xf0, 0x3d, 0xef, 0x3d, 0xef, 0x3d, 0xef,  // B.B.B.B.=.=.=.=.
/* 0030 */ 0x3d, 0xef, 0x3d, 0xcf, 0x3d, 0x10, 0x42, 0x10, 0x42, 0x40, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00,  // =.=.=.B.B@1.....
/* 0040 */ 0x00, 0x00, 0x8e, 0x32, 0x46, 0xef, 0x3d, 0xef, 0x3d, 0xef, 0x3d, 0xef, 0x3d, 0xef, 0x3d, 0xce,  // ...2F.=.=.=.=.=.
/* 0050 */ 0x39, 0xce, 0x39, 0xce, 0x39, 0xae, 0x39, 0xae, 0x39, 0xae, 0x39, 0xcf, 0x39, 0xcf, 0x39, 0x11,  // 9.9.9.9.9.9.9.9.
/* 0060 */ 0x83, 0x29, 0x25, 0x52, 0x4a, 0xf0, 0x3d, 0x06, 0x84, 0xcf, 0x39, 0xad, 0x35, 0xae, 0x35, 0xce,  // .)%RJ.=...9.5.5.
/* 0070 */ 0x39, 0x15, 0x8d, 0x7b, 0x6f, 0x39, 0x67, 0x11, 0x42, 0x11, 0x42, 0xcf, 0x3d, 0x9c, 0x73, 0x5a,  // 9..{o9g.B.B.=.sZ
/* 0080 */ 0x6b, 0xcf, 0x39, 0x9c, 0x73, 0x5a, 0x6b, 0xae, 0x35, 0x9c, 0x73, 0x9c, 0x73, 0x12, 0x8e, 0x94,  // k.9.sZk.5.s.s...
/* 0090 */ 0x52, 0xde, 0x7b, 0xff, 0x7f, 0xd6, 0x5a, 0xd6, 0x5a, 0xef, 0x3d, 0xff, 0x7f, 0x39, 0x67, 0xef,  // R.{...Z.Z.=..9g.
/* 00a0 */ 0x3d, 0xff, 0x7f, 0xf7, 0x5e, 0xce, 0x39, 0xff, 0x7f, 0xff, 0x7f, 0x12, 0x8e, 0x39, 0x67, 0xff,  // =...^.9......9g.
/* 00b0 */ 0x7f, 0xff, 0x7f, 0xde, 0x7b, 0xde, 0x7b, 0x52, 0x4a, 0xff, 0x7f, 0x19, 0x67, 0xef, 0x3d, 0xff,  // ....{.{RJ...g.=.
/* 00c0 */ 0x7f, 0xf7, 0x5e, 0xae, 0x39, 0xde, 0x7b, 0xde, 0x7b, 0x12, 0x8e, 0xff, 0x7f, 0xbe, 0x77, 0x94,  // ..^.9.{.{.....w.
/* 00d0 */ 0x52, 0xff, 0x7f, 0xff, 0x7f, 0x9c, 0x73, 0xff, 0x7f, 0x39, 0x67, 0x10, 0x42, 0xff, 0x7f, 0x18,  // R.....s..9g.B...
/* 00e0 */ 0x63, 0xcf, 0x39, 0xff, 0x7f, 0xff, 0x7f, 0x13, 0x84, 0xd6, 0x5a, 0x11, 0x42, 0x7b, 0x6f, 0x7b,  // c.9.......Z.B{o{
/* 00f0 */ 0x6f, 0x69, 0xff, 0x7f, 0x12, 0x8c, 0x7b, 0x6f, 0x74, 0x4e, 0x52, 0x4a, 0x94, 0x4e, 0x94, 0x4e,  // oi....{otNRJ.N.N
/* 0100 */ 0xbd, 0x77, 0xf7, 0x5e, 0x94, 0x52, 0x9d, 0x73, 0xd6, 0x5a, 0x73, 0x4e, 0x9c, 0x73, 0xd0, 0x33,  // .w.^.R.s.ZsN.s.3
/* 0110 */ 0x08, 0x21, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0xd6, 0x5a, 0x94, 0x52, 0x94, 0x52,  // .!.........Z.R.R
/* 0120 */ 0x73, 0x4a, 0x73, 0x4a, 0x31, 0x46, 0x31, 0x46, 0x11, 0x42, 0xf0, 0x3d, 0xf0, 0x3d, 0xf0, 0x3d,  // sJsJ1F1F.B.=.=.=
/* 0130 */ 0xce, 0x39, 0xf0, 0x3d, 0xf0, 0x3d, 0x12, 0x8e, 0x18, 0x63, 0xb5, 0x52, 0x94, 0x52, 0x74, 0x4e,  // .9.=.=...c.R.RtN
/* 0140 */ 0x74, 0x4e, 0x73, 0x4e, 0x53, 0x4a, 0x52, 0x4a, 0x32, 0x46, 0x31, 0x46, 0x11, 0x42, 0x10, 0x42,  // tNsNSJRJ2F1F.B.B
/* 0150 */ 0x31, 0x46, 0x31, 0x46, 0x12, 0x8e, 0x9c, 0x6f, 0x18, 0x63, 0x18, 0x5f, 0xf7, 0x5e, 0xf7, 0x5e,  // 1F1F...o.c._.^.^
/* 0160 */ 0xd6, 0x5a, 0xb6, 0x56, 0xb5, 0x52, 0x94, 0x52, 0x74, 0x4e, 0x73, 0x4e, 0x53, 0x4a, 0x74, 0x4e,  // .Z.V.R.RtNsNSJtN
/* 0170 */ 0x74, 0x4e, 0x11, 0x81, 0x59, 0x6b, 0x6e, 0x29, 0x25, 0x81, 0x59, 0x6b, 0x11, 0x72, 0x59, 0x6b,  // tN..Ykn)%.Yk.rYk
/* 0180 */ 0x08, 0x84, 0xb4, 0x1d, 0xb4, 0x1d, 0xb4, 0x1d, 0xb4, 0x1d,                    // ..........
    };

    const BGRPalette palette = make_bgr_palette_from_bgrx_array(raw_palette);

    Bitmap bmp(BitsPerPixel{15}, BitsPerPixel{15}, &palette, 32, 32, raw_bitmap, sizeof(raw_bitmap), true);

    // red square
    gd.mem_blt(Rect(5, 5, 20, 20), bmp, 0, 0);
    RED_CHECK_SIG(gd, "\x5c\xe2\x1b\x2e\xca\x65\xbc\xec\x34\xfd\x28\xe8\x06\x9d\x4d\x10\xbc\x7f\x22\x4a");

    // uncomment to see result in png file
    //dump_png("./test_memblt3_", gd.impl());
}


//RED_AUTO_TEST_CASE(test_BitArray2D)
//{
//    Pointer p = drawable_default_pointer(false);
////    auto av     = p.get_24bits_xor_mask();
//    auto avmask = p.get_monochrome_and_mask();
//
//    Array2D a2d(4, 32, avmask.data());
//    for (auto x : a2d){
//        BitArray ba(32, x);
//        for (auto bit : ba){
//            printf("%s", bit?"1":"0");
//        }
//        printf("\n");
//    }
//}

// Detect TS_BITMAP_DATA(Uncompressed bitmap data) + (Compressed)bitmapDataStream
RED_AUTO_TEST_CASE(TestBitmapUpate)
{
    // Create a simple capture image and dump it to file
    uint16_t width = 320;
    uint16_t height = 200;
    Rect screen_rect(0, 0, width, height);

    Drawable gd(width, height);
    gd.opaquerect(screen_rect, gd.u32bgr_to_color(0x2F2F2F));

    uint8_t raw_palette[] = {
/* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0030 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0040 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0050 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0080 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0090 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0100 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0110 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0120 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0130 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0140 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0150 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0160 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0170 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0180 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0190 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0200 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0210 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0220 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0230 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0240 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0250 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0260 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0270 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0280 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0290 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0300 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0310 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0320 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0330 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0340 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0350 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0360 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0370 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0380 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0390 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
    };
    uint8_t raw_bitmap[] = {
/* 0000 */ "\x0c\x96\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x51\x8c\x8e\x73" // ............Q..s
/* 0010 */ "\x8e\x73\x8e\x73\x8e\x73\x8e\x73\x8e\x73\x6d\x6b\x6d\x6b\x6d\x6b" // .s.s.s.s.smkmkmk
/* 0020 */ "\x6d\x6b\x30\x84\x30\x84\x30\x84\x00\x00\xd3\x9c\xf7\xbd\x6c\xba" // mk0.0.0.......l.
/* 0030 */ "\xd6\x9f\xf7\xbd\x30\x84\xd3\x9c\xba\xd6\x92\x94\xcf\x7b\x92\x94" // ....0........{..
/* 0040 */ "\xcf\x7b\xcf\x7b\xcf\x7b\xcf\x7b\xcf\x7b\xcf\x7b\x92\x94\xcf\x7b" // .{.{.{.{.{.{...{
/* 0050 */ "\x92\x94\xba\xd6\x30\x84\xd3\x9c\xba\xd6\x92\x94\x7d\xef\x92\x94" // ....0.......}...
/* 0060 */ "\x7d\xef\x7d\xef\x7d\xef\x7d\xef\x7d\xef\x7d\xef\x92\x94\x7d\xef" // }.}.}.}.}.}...}.
/* 0070 */ "\x06\x81\xcf\x7b\xe5\xcf\x7b\x92\x94\x05\x81\x7d\xef\xe5\x7d\xef" // ...{..{....}..}.
/* 0080 */ "\x92\x94\x05\x6b\x92\x94\x03\x81\xf7\xbd\xcc\x28\x42\x86\xf7\xbd" // ...k.......(B...
/* 0090 */ "\x51\x8c\x00\x00\xd3\x9c\x30\x84\x51\x8c\xc9\x69\x4a\x87\x92\x94" // Q.....0.Q..iJ...
/* 00a0 */ "\xd3\x9c\x00\x00\x00\x00\x00\x00\x92\x94\x14\xa5\x6f\x00\x00\x89" // ............o...
/* 00b0 */ "\xd3\x9c\x14\xa5\x00\x00\x00\x00\x00\x00\x14\xa5\x14\xa5\x14\xa5" // ................
/* 00c0 */ "\x14\xa5\x68\x00\x00\x89\x92\x94\xd3\x9c\x14\xa5\xd3\x9c\x92\x94" // ..h.............
/* 00d0 */ "\x92\x94\x92\x94\x92\x94\xd3\x9c\x68\x00\x00\x89\x51\x8c\x92\x94" // ........h...Q...
/* 00e0 */ "\x51\x8c\xb6\xb5\x00\x00\x00\x00\x00\x00\x51\x8c\x14\xa5\x6f\x00" // Q.........Q...o.
/* 00f0 */ "\x00\x81\x51\x8c\x0e\x84\x00\x00\x00\x00\x00\x00\x00\x00"         // ..Q...........
    };

    const BGRPalette palette = make_bgr_palette_from_bgrx_array(raw_palette);

    Bitmap bmp(BitsPerPixel{16}, BitsPerPixel{16}, &palette, 16, 16, raw_bitmap, 254, true);

    // red square
    gd.mem_blt(Rect(5, 5, 16, 16), bmp, 0, 0);
//    RED_CHECK_SIG(gd, "\x5c\xe2\x1b\x2e\xca\x65\xbc\xec\x34\xfd\x28\xe8\x06\x9d\x4d\x10\xbc\x7f\x22\x4a");

    // uncomment to see result in png file
    //dump_png24("./test_mouse_000_.png", gd, true);

    Bitmap bmp2(BitsPerPixel{16}, BitsPerPixel{16}, &palette, 16, 16, bmp.data(), bmp.bmp_size(), false);

    StaticOutStream<1024> out;
    bmp2.compress(BitsPerPixel{16}, out);

    auto data_compressed = bmp.data_compressed();

    RED_CHECK_EQUAL(254, data_compressed.size());
    RED_CHECK_EQUAL(0, memcmp(raw_bitmap, data_compressed.data(), data_compressed.size()));
}

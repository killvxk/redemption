import testing ;

import type ;
type.register PYTHON : py ;

import toolset ;
import feature : feature ;

feature.feature <covfile> : : free ;
toolset.flags cover COVERFILE : <covfile> ;

feature.feature <covflag> : : free ;
toolset.flags cover COVERFLAG : <covflag> ;

feature.feature <covbin> : : free ;
toolset.flags cover COVERBIN : <covbin> ;


actions cover
{
    echo "Computing coverage for $(COVERFILE) "

    # echo "COVERFILE = $(COVERFILE)"
    # echo "source = $(>)"
    # echo "target = $(<)"

    raise () { echo "$1" ; rm *gcov ; exit 1 ; }

    COVERBIN=$(COVERBIN)
    [ -z "$(COVERBIN)" ] && COVERBIN=gcov
    COVER_PATH="$(<).dir"
    TAGS="$COVER_PATH/TAGS"
    mkdir -p "$COVER_PATH"

    root=$(>:P)
    root=${root%%/tests/*}

    etags -o "$TAGS" $(COVERFILE) || raise 'etags failed'

    echo > "$COVER_PATH"/report.coverage

    echo $(COVERFILE) | tr ' ' '\n' | while read f ; do
        COVER_GCNO=''
        case ${f##*.} in
            h|hpp) COVER_GCNO=$(>:P)"/$(<:B).gcno" ;;
            cpp) COVER_GCNO="$root/${f%cpp}gcno" ;;
            c)   COVER_GCNO="$root/${f%c}gcno" ;;
        esac
        [ -e "$COVER_GCNO" ] || raise "coverage file \"$COVER_GCNO\" does not exist"

        "$COVERBIN" \
            --unconditional-branches \
            --all-blocks \
            --branch-count \
            --branch-probabilities \
            --function-summaries \
            --demangled-names \
            -o "$COVER_GCNO" \
            "$(>:S=)" \
            >> "$COVER_PATH"/report.coverage \
        || raise 'gcov failed'

        GCOV=${f##*/}.gcov
        [ -e "$GCOV" ] || :> "$GCOV"

        mv "$GCOV" "$COVER_PATH" || raise 'gcov mv failed'
    done

    python tools/coverage.py $(<) "$TAGS" $COVER_PATH/*.gcov > "$COVER_PATH".report \
    || raise 'python tools/coverage.py failed'
    cat "$COVER_PATH".report

    rm *gcov

    : > $(<)
}

actions id {
    : > $(<)
}

constant CXXFLAGS_TEST :
    <include>$(REDEMPTION_TEST_PATH)/includes
    <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"'
    <define>REDEMPTION_DECL_LOG_TEST
;

obj register_exception.o :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/impl/register_exception.cpp
:
    $(CXXFLAGS_TEST)
;

lib libunit_test :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/impl/test_framework.cpp
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/redemption_unit_tests.cpp
:
    $(CXXFLAGS_TEST)
    <link>shared
    # <cxxflags>-frtti
;

constant TEST_DEPENDENCIES :
    <library>libunit_test
    <library>log_test.o
    # <cxxflags>-frtti
    <define>BOOST_AUTO_TEST_MAIN
    <define>BOOST_TEST_DYN_LINK
    $(CXXFLAGS_TEST)
;

rule test-run ( target : source : requirements * : )
{
    if <library>src/core/error.o in $(requirements)
    {
        requirements += <library>register_exception.o ;
    }

    unit-test $(target) : $(source) : $(TEST_DEPENDENCIES) $(requirements) ;

    if ! <covflag>nocover in $(requirements)
    {
        local ps = [ property-set.create $(requirements) ] ;
        local files = [ $(ps).get <covfile> ] ;
        if $(files)
        {
            make $(target:S=.coverage) : $(target) : id :
                <variant>coverage:<action>@cover
                <covfile>$(files)
            ;
        }
    }
}
